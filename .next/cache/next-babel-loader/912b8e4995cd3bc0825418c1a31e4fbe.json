{"ast":null,"code":"import axios from \"axios\";\nimport { message } from \"antd\";\nconst service = axios.create({});\nconst serviceUtil = {\n  get: function get(url, config) {\n    return new Promise(async (res, rej) => {\n      let response = await service.get(url, config);\n      res(response);\n    }).catch(error => {\n      var _error$response, _error$response$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error);\n    });\n  },\n  post: function post(url, data, config) {\n    return new Promise(async (res, rej) => {\n      let response = await service.post(url, data, config);\n      res(response);\n    }).catch(error => {\n      var _error$response2, _error$response2$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error);\n    });\n  },\n  put: function put(url, data, config) {\n    return new Promise(async (res, rej) => {\n      let response = await service.put(url, data, config);\n      res(response);\n    }).catch(error => {\n      var _error$response3, _error$response3$data;\n\n      message.error(error === null || error === void 0 ? void 0 : (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error);\n    });\n  }\n};\nexport default serviceUtil;","map":{"version":3,"sources":["/Users/johnsweet/repos/youtube-recommender-frontend/src/services/service.js"],"names":["axios","message","service","create","serviceUtil","get","url","config","Promise","res","rej","response","catch","error","data","post","put"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa,EAAb,CAAhB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,GAAb,EAAkBC,MAAlB,EAA0B;AAC7B,WAAO,IAAIC,OAAJ,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACrC,UAAIC,QAAQ,GAAG,MAAMT,OAAO,CAACG,GAAR,CAAYC,GAAZ,EAAiBC,MAAjB,CAArB;AACAE,MAAAA,GAAG,CAACE,QAAD,CAAH;AACD,KAHM,EAGJC,KAHI,CAGGC,KAAD,IAAW;AAAA;;AAClBZ,MAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd,aAAcA,KAAd,0CAAcA,KAAK,CAAEF,QAArB,4EAAc,gBAAiBG,IAA/B,yDAAc,qBAAuBD,KAArC;AACD,KALM,CAAP;AAMD,GARiB;AASlBE,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcT,GAAd,EAAmBQ,IAAnB,EAAyBP,MAAzB,EAAiC;AACrC,WAAO,IAAIC,OAAJ,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACrC,UAAIC,QAAQ,GAAG,MAAMT,OAAO,CAACa,IAAR,CAAaT,GAAb,EAAkBQ,IAAlB,EAAwBP,MAAxB,CAArB;AACAE,MAAAA,GAAG,CAACE,QAAD,CAAH;AACD,KAHM,EAGJC,KAHI,CAGGC,KAAD,IAAW;AAAA;;AAClBZ,MAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd,aAAcA,KAAd,2CAAcA,KAAK,CAAEF,QAArB,8EAAc,iBAAiBG,IAA/B,0DAAc,sBAAuBD,KAArC;AACD,KALM,CAAP;AAMD,GAhBiB;AAiBlBG,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaV,GAAb,EAAkBQ,IAAlB,EAAwBP,MAAxB,EAAgC;AACnC,WAAO,IAAIC,OAAJ,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACrC,UAAIC,QAAQ,GAAG,MAAMT,OAAO,CAACc,GAAR,CAAYV,GAAZ,EAAiBQ,IAAjB,EAAuBP,MAAvB,CAArB;AACAE,MAAAA,GAAG,CAACE,QAAD,CAAH;AACD,KAHM,EAGJC,KAHI,CAGGC,KAAD,IAAW;AAAA;;AAClBZ,MAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd,aAAcA,KAAd,2CAAcA,KAAK,CAAEF,QAArB,8EAAc,iBAAiBG,IAA/B,0DAAc,sBAAuBD,KAArC;AACD,KALM,CAAP;AAMD;AAxBiB,CAApB;AA2BA,eAAeT,WAAf","sourcesContent":["import axios from \"axios\";\nimport { message } from \"antd\";\n\nconst service = axios.create({});\n\nconst serviceUtil = {\n  get: function get(url, config) {\n    return new Promise(async (res, rej) => {\n      let response = await service.get(url, config);\n      res(response);\n    }).catch((error) => {\n      message.error(error?.response?.data?.error);\n    });\n  },\n  post: function post(url, data, config) {\n    return new Promise(async (res, rej) => {\n      let response = await service.post(url, data, config);\n      res(response);\n    }).catch((error) => {\n      message.error(error?.response?.data?.error);\n    });\n  },\n  put: function put(url, data, config) {\n    return new Promise(async (res, rej) => {\n      let response = await service.put(url, data, config);\n      res(response);\n    }).catch((error) => {\n      message.error(error?.response?.data?.error);\n    });\n  },\n};\n\nexport default serviceUtil;\n"]},"metadata":{},"sourceType":"module"}